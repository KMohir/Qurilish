import asyncio
import logging
from datetime import datetime
import pytz
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN, ADMIN_IDS, TIMEZONE
from database import Database
from excel_handler import ExcelHandler
import pandas as pd
import io
import psycopg2.extras

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Excel –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
db = Database()
excel_handler = ExcelHandler()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_role = State()

class PurchaseRequestStates(StatesGroup):
    waiting_for_supplier = State()
    waiting_for_object = State()
    waiting_for_product = State()
    waiting_for_quantity = State()
    waiting_for_unit = State()
    waiting_for_description = State()
    waiting_for_excel_file = State()

class SellerOfferStates(StatesGroup):
    waiting_for_price = State()
    waiting_for_total = State()
    waiting_for_excel_offer = State()

class BuyerApprovalStates(StatesGroup):
    waiting_for_offer_approval = State()

class SellerDeliveryStates(StatesGroup):
    waiting_for_shipment_confirmation = State()

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
timezone = pytz.timezone(TIMEZONE)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def get_current_time():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —É–∑–±–µ–∫—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ"""
    return datetime.now(timezone).strftime("%d.%m.%Y %H:%M")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_role: str):
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    if user_role == 'buyer':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –ê—Ä–∏–∑–∞ —è—Ä–∞—Ç–∏—à")],
                [KeyboardButton(text="üìä –ú–µ–Ω–∏–Ω–≥ –∞—Ä–∏–∑–∞–ª–∞—Ä–∏–º")],
                [KeyboardButton(text="üì¶ –ú–µ–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏–º")],
                [KeyboardButton(text="‚ÑπÔ∏è –Å—Ä–¥–∞–º")]
            ],
            resize_keyboard=True
        )
    elif user_role == 'seller':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –§–∞–æ–ª –∞—Ä–∏–∑–∞–ª–∞—Ä")],
                [KeyboardButton(text="üíº –ú–µ–Ω–∏–Ω–≥ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–º")],
                [KeyboardButton(text="‚ÑπÔ∏è –Å—Ä–¥–∞–º")]
            ],
            resize_keyboard=True
        )
    elif user_role == 'warehouse':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì¶ –ö—É—Ç–≥–∞–Ω –µ—Ç–∫–∞–∑–∏–± –±–µ—Ä–∏—à–ª–∞—Ä")],
                [KeyboardButton(text="‚úÖ –ö–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä")],
                [KeyboardButton(text="‚ÑπÔ∏è –Å—Ä–¥–∞–º")]
            ],
            resize_keyboard=True
        )
    elif user_role == 'admin':
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üë• –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–Ω–∏ –±–æ—à“õ–∞—Ä–∏—à")],
                [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="‚ÑπÔ∏è –Å—Ä–¥–∞–º")]
            ],
            resize_keyboard=True
        )
    else:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ÑπÔ∏è –Å—Ä–¥–∞–º")]],
            resize_keyboard=True
        )
    
    return keyboard

def get_role_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ó–∞–∫–∞–∑—á–∏–∫")],
            [KeyboardButton(text="üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫")],
            [KeyboardButton(text="üè≠ –ó–∞–≤. –°–∫–ª–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_contact_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ú–µ–Ω–∏–Ω–≥ —Ä–∞“õ–∞–º–∏–Ω–∏ —é–±–æ—Ä–∏—à", request_contact=True)]
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await state.clear()
    print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    user = db.get_user(message.from_user.id)
    
    if user:
        if user['is_approved']:
            await message.answer(
                f"–•—É—à –∫–µ–ª–∏–±—Å–∏–∑, {user['full_name']}!\n"
                f"–†–æ–ª–∏–Ω–≥–∏–∑: {user['role']}\n"
                f"–í–∞“õ—Ç: {get_current_time()}",
                reply_markup=get_main_keyboard(user['role'])
            )
            print(f"DEBUG: –ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å —Ä–æ–ª—å—é {user['role']}")
        else:
            await message.answer(
                "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∞—Ä–∏–∑–∞–Ω–≥–∏–∑ –º–∞—ä–º—É—Ä —Ç–∞—Å–¥–∏“õ–ª–∞—à–∏–Ω–∏ –∫—É—Ç–º–æ“õ–¥–∞. "
                "–ú–∞—ä–º—É—Ä –∞—Ä–∏–∑–∞–Ω–≥–∏–∑–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–≥–∞–Ω–¥–∞ —Ö–∞–±–∞—Ä –æ–ª–∞—Å–∏–∑."
            )
    else:
        await message.answer(
            "SFX Savdo —Ç–∏–∑–∏–º–∏–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑! üìã\n\n"
            "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω –±–∏–∑–≥–∞ –∫–µ—Ä–∞–∫:\n"
            "1Ô∏è‚É£ –¢—û–ª–∏“õ –∏—Å–º–∏–Ω–≥–∏–∑\n"
            "2Ô∏è‚É£ Telegram-–≥–∞ –±–æ–≥–ª–∞–Ω–≥–∞–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑\n"
            "3Ô∏è‚É£ –¢–∏–∑–∏–º–¥–∞–≥–∏ —Ä–æ–ª–∏–Ω–≥–∏–∑\n\n"
            "–ò—Å–º–¥–∞–Ω –±–æ—à–ª–∞–π–º–∏–∑. –¢—û–ª–∏“õ –∏—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:"
        )
        await state.set_state(RegistrationStates.waiting_for_name)

@router.message(Command("register"))
async def cmd_register(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    user = db.get_user(message.from_user.id)
    
    if user and user['is_approved']:
        await message.answer("–°–∏–∑ –∞–ª–ª–∞“õ–∞—á–æ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω –≤–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω—Å–∏–∑!")
        return
    
    await message.answer(
        "SFX Savdo —Ç–∏–∑–∏–º–∏–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑! üìã\n\n"
        "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω –±–∏–∑–≥–∞ –∫–µ—Ä–∞–∫:\n"
        "1Ô∏è‚É£ –¢—û–ª–∏“õ –∏—Å–º–∏–Ω–≥–∏–∑\n"
        "2Ô∏è‚É£ Telegram-–≥–∞ –±–æ–≥–ª–∞–Ω–≥–∞–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑\n"
        "3Ô∏è‚É£ –¢–∏–∑–∏–º–¥–∞–≥–∏ —Ä–æ–ª–∏–Ω–≥–∏–∑\n\n"
        "–ò—Å–º–¥–∞–Ω –±–æ—à–ª–∞–π–º–∏–∑. –¢—û–ª–∏“õ –∏—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:"
    )
    await state.set_state(RegistrationStates.waiting_for_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(name=message.text)
    await message.answer(
        "–†–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏—à —É—á—É–Ω —Ç—û“ì—Ä–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:",
        reply_markup=get_contact_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    print("DEBUG: === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ù–¢–ê–ö–¢–ê –°–†–ê–ë–û–¢–ê–õ ===")
    contact = message.contact
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    print(f"DEBUG: contact.phone_number = {contact.phone_number}")
    print(f"DEBUG: contact.user_id = {contact.user_id}")
    print(f"DEBUG: message.from_user.id = {message.from_user.id}")
    print(f"DEBUG: contact.first_name = {contact.first_name}")
    print(f"DEBUG: contact.last_name = {contact.last_name}")
    
    # –£–ø—Ä–æ—â–∞–µ–º –ª–æ–≥–∏–∫—É - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –∫–æ–Ω—Ç–∞–∫—Ç
    phone = contact.phone_number
    if phone.startswith('+'):
        phone = phone[1:]  # –£–±–∏—Ä–∞–µ–º + –µ—Å–ª–∏ –µ—Å—Ç—å
    
    await state.update_data(phone=phone)
    await message.answer(
        f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ –æ–ª–∏–Ω–¥–∏: {contact.phone_number}\n\n"
        "–≠–Ω–¥–∏ —Ä–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
        reply_markup=get_role_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_role)
    print("DEBUG: === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ù–¢–ê–ö–¢–ê –ó–ê–í–ï–†–®–ï–ù ===")

@router.message(RegistrationStates.waiting_for_phone)
async def process_phone_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç"""
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    print(f"DEBUG: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
    print(f"DEBUG: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
    print(f"DEBUG: –ï—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç: {hasattr(message, 'contact')}")
    
    await message.answer(
        "‚ùå –ò–ª—Ç–∏–º–æ—Å, —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏—à —É—á—É–Ω 'üìû –ú–µ–Ω–∏–Ω–≥ —Ä–∞“õ–∞–º–∏–Ω–∏ —é–±–æ—Ä–∏—à' —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥:",
        reply_markup=get_contact_keyboard()
    )

@router.message(RegistrationStates.waiting_for_role)
async def process_role(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role_mapping = {
        "üë§ –ó–∞–∫–∞–∑—á–∏–∫": "buyer",
        "üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫": "seller", 
        "üè≠ –ó–∞–≤. –°–∫–ª–∞–¥": "warehouse"
    }
    
    if message.text not in role_mapping:
        await message.answer("–ò–ª—Ç–∏–º–æ—Å, —Ç–∞–∫–ª–∏—Ñ —ç—Ç–∏–ª–≥–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
        return
    
    role = role_mapping[message.text]
    user_data = await state.get_data()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = db.add_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=user_data['name'],
        phone=user_data['phone'],
        role=role
    )
    
    if role == 'seller':
        # –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è—é—Ç—Å—è
        db.approve_user(message.from_user.id)
        await message.answer(
            f"–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —è–∫—É–Ω–ª–∞–Ω–¥–∏!\n\n"
            f"–•—É—à –∫–µ–ª–∏–±—Å–∏–∑, {user_data['name']}!\n"
            f"–†–æ–ª–∏–Ω–≥–∏–∑: {role}\n"
            f"–í–∞“õ—Ç: {get_current_time()}",
            reply_markup=get_main_keyboard(role)
        )
        print(f"DEBUG: –ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {message.from_user.id}")
    else:
        # –ó–∞–∫–∞–∑—á–∏–∫–∏ –∏ –∑–∞–≤. —Å–∫–ª–∞–¥–∞ —Ç—Ä–µ–±—É—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        await message.answer(
            "–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —è–∫—É–Ω–ª–∞–Ω–¥–∏! –ê—Ä–∏–∑–∞–Ω–≥–∏–∑ –º–∞—ä–º—É—Ä–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏ —Ç–∞—Å–¥–∏“õ–ª–∞—à —É—á—É–Ω. "
            "–ú–∞—ä–º—É—Ä –∞—Ä–∏–∑–∞–Ω–≥–∏–∑–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–≥–∞–Ω–¥–∞ —Ö–∞–±–∞—Ä –æ–ª–∞—Å–∏–∑.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üîî –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω —è–Ω–≥–∏ –∞—Ä–∏–∑–∞!\n"
                    f"–ò—Å–º: {user_data['name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
                    f"–†–æ–ª—å: {role}\n"
                    f"Telegram ID: {message.from_user.id}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("–°–∏–∑–¥–∞ –º–∞—ä–º—É—Ä “≥—É“õ—É“õ–ª–∞—Ä–∏ –π—û“õ!")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è", callback_data="admin_pending_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="admin_add_buyer")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤. —Å–∫–ª–∞–¥–∞", callback_data="admin_add_warehouse")]
    ])
    
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith('admin_'))
async def process_admin_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö callback'–æ–≤"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–°–∏–∑–¥–∞ –º–∞—ä–º—É—Ä “≥—É“õ—É“õ–ª–∞—Ä–∏ –π—û“õ!")
        return
    
    action = callback_query.data
    
    if action == "admin_pending_users":
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
        conn = db.get_connection()
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        cursor.execute("""
            SELECT * FROM users 
            WHERE is_approved = FALSE AND role != 'seller'
            ORDER BY created_at DESC
        """)
        pending_users = cursor.fetchall()
        cursor.close()
        conn.close()
        
        if not pending_users:
            await callback_query.message.answer("–¢–∞—Å–¥–∏“õ–ª–∞—à–Ω–∏ –∫—É—Ç–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä –π—û“õ.")
            return
        
        text = "üë• –¢–∞—Å–¥–∏“õ–ª–∞—à–Ω–∏ –∫—É—Ç–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä:\n\n"
        for user in pending_users:
            text += f"ID: {user['telegram_id']}\n"
            text += f"–ò—Å–º: {user['full_name']}\n"
            text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
            text += f"–†–æ–ª—å: {user['role']}\n"
            text += f"–°–∞–Ω–∞: {user['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            text += "‚îÄ" * 30 + "\n"
        
        await callback_query.message.answer(text)
    
    elif action == "admin_add_buyer":
        await callback_query.message.answer(
            "–ó–∞–∫–∞–∑—á–∏–∫ “õ—û—à–∏—à —É—á—É–Ω, —É–Ω–∏–Ω–≥–≥–∞ /register –±—É–π—Ä—É“ì–∏–Ω–∏ —é–±–æ—Ä–∏—à –≤–∞ '–ó–∞–∫–∞–∑—á–∏–∫' —Ä–æ–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞—à–Ω–∏ —Å—û—Ä–∞–Ω–≥"
        )
    
    elif action == "admin_add_warehouse":
        await callback_query.message.answer(
            "–ó–∞–≤. —Å–∫–ª–∞–¥ “õ—û—à–∏—à —É—á—É–Ω, —É–Ω–∏–Ω–≥–≥–∞ /register –±—É–π—Ä—É“ì–∏–Ω–∏ —é–±–æ—Ä–∏—à –≤–∞ '–ó–∞–≤. –°–∫–ª–∞–¥' —Ä–æ–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞—à–Ω–∏ —Å—û—Ä–∞–Ω–≥"
        )
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Excel –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@router.callback_query(lambda c: c.data.startswith('create_'))
async def process_create_request(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    action = callback_query.data
    
    if action == "create_excel_request":
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω Excel
        excel_file = excel_handler.create_purchase_request_template()
        await callback_query.message.answer_document(
            types.BufferedInputFile(
                excel_file.getvalue(),
                filename="–∑–∞—è–≤–∫–∞_—à–∞–±–ª–æ–Ω.xlsx"
            ),
            caption="üìä –ë—É —à–∞–±–ª–æ–Ω–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥ –≤–∞ “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏–Ω–≥:\n\n"
                   "‚ö†Ô∏è **–ú–£“≤–ò–ú:** –ë–∏—Ä—ñ–Ω—á–∏ “õ–∞—Ç–æ—Ä–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –≤–∞ –æ–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥!\n"
                   "üìù –ú–∏—Å–æ–ª–ª–∞—Ä–¥–∞ –∫—û—Ä—Å–∞—Ç–∏–ª–≥–∞–Ω —Ñ–æ—Ä–º–∞—Ç–¥–∞ —ë–∑–∏–Ω–≥."
        )
        await state.set_state(PurchaseRequestStates.waiting_for_excel_file)
        
    elif action == "create_text_request":
        await callback_query.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "–ü–æ—Å—Ç–∞–≤—â–∏–∫: [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞]\n"
            "–û–±—ä–µ–∫—Ç: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞]\n"
            "–¢–æ–≤–∞—Ä: [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞]\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: [—á–∏—Å–ª–æ]\n"
            "–ï–¥–∏–Ω–∏—Ü–∞: [—à—Ç/–∫–≥/–º –∏ —Ç.–¥.]\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ: [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]"
        )
        await state.set_state(PurchaseRequestStates.waiting_for_supplier)
    
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('send_offer_'))
async def process_send_offer(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    request_id = int(callback_query.data.split('_')[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    conn = db.get_connection()
    cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
    cursor.execute("""
        SELECT pr.id, pr.buyer_id, pr.supplier as supplier_name, pr.object_name, pr.status, pr.created_at
        FROM purchase_requests pr
        WHERE pr.id = %s
    """, (request_id,))
    request = cursor.fetchone()
    
    if request:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞—è–≤–∫–∏
        cursor.execute("""
            SELECT * FROM request_items 
            WHERE request_id = %s 
            ORDER BY created_at
        """, (request_id,))
        request['items'] = cursor.fetchall()
    
    cursor.close()
    conn.close()
    
    if not request:
        await callback_query.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback_query.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(request_id=request_id)
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    request_data = {
        'supplier_name': request['supplier_name'],
        'object_name': request['object_name'],
        'items': request['items']
    }
    
    excel_file = excel_handler.create_seller_offer_template(request_data)
    await callback_query.message.answer_document(
        types.BufferedInputFile(
            excel_file.getvalue(),
            filename="–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ_—à–∞–±–ª–æ–Ω.xlsx"
        ),
        caption="üíº –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ü–µ–Ω—ã –≤ –∂–µ–ª—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ:"
    )
    await state.set_state(SellerOfferStates.waiting_for_excel_offer)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Excel —Ñ–∞–π–ª–æ–≤
@router.message(PurchaseRequestStates.waiting_for_excel_file, F.document)
async def process_excel_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –∑–∞—è–≤–∫–æ–π"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_content = await bot.download_file(file.file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
        is_valid, error_msg = excel_handler.validate_excel_structure(file_content.read(), 'request')
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return
        
        file_content.seek(0)
        # –ü–∞—Ä—Å–∏–º Excel
        request_data = excel_handler.parse_purchase_request(file_content.read())
        
        if not request_data['items']:
            await message.answer("‚ùå –§–∞–π–ª –±—û—à —ë–∫–∏ –Ω–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏ –æ–±—ä–µ–∫—Ç
        if request_data['supplier_name'] == '–ù–µ —É–∫–∞–∑–∞–Ω' or request_data['object_name'] == '–ù–µ —É–∫–∞–∑–∞–Ω':
            await message.answer(
                "‚ùå –ò–ª—Ç–∏–º–æ—Å, Excel —Ñ–∞–π–ª–¥–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –≤–∞ –æ–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥!\n\n"
                "üìù –ë–∏—Ä—ñ–Ω—á–∏ “õ–∞—Ç–æ—Ä–¥–∞:\n"
                "‚Ä¢ –ü–æ—Ç—Å–∞–≤—à–∏–∫: [–ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–æ–º–∏]\n"
                "‚Ä¢ –û–±–µ–∫—Ç –Ω–æ–º–∏: [–æ–±—ä–µ–∫—Ç –Ω–æ–º–∏]\n\n"
                "–ú–∏—Å–æ–ª:\n"
                "‚Ä¢ –ü–æ—Ç—Å–∞–≤—à–∏–∫: –û–û–û \"–°—Ç—Ä–æ–∏—Ç–µ–ª—å\"\n"
                "‚Ä¢ –û–±–µ–∫—Ç –Ω–æ–º–∏: –ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å \"–°–∞–º –°–∏—Ç–∏\""
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = db.get_user(message.from_user.id)
        
        request_id = db.add_purchase_request(
            buyer_id=user['id'],
            supplier_name=request_data['supplier_name'],
            object_name=request_data['object_name']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞—è–≤–∫–∏
        for item in request_data['items']:
            db.add_request_item(
                request_id=request_id,
                product_name=item['product_name'],
                quantity=item['quantity'],
                unit=item['unit'],
                material_description=item['material_description']
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
        sellers = db.get_users_by_role('seller')
        for seller in sellers:
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
                message_text = f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                message_text += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {request_data['supplier_name']}\n"
                message_text += f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {request_data['object_name']}\n"
                message_text += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(request_data['items'])}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
                for i, item in enumerate(request_data['items'][:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                    message_text += f"{i}. {item['product_name']} - {item['quantity']} {item['unit']}\n"
                
                if len(request_data['items']) > 3:
                    message_text += f"... –∏ –µ—â–µ {len(request_data['items']) - 3} —Ç–æ–≤–∞—Ä–æ–≤\n"
                
                await bot.send_message(
                    seller['telegram_id'],
                    message_text
                )
            except Exception as e:
                logger.error(f"Failed to send request to seller {seller['telegram_id']}: {e}")
        
        await message.answer(
            f"‚úÖ {len(request_data['items'])} —Ç–æ–≤–∞—Ä –±–∏–ª–∞–Ω –∞—Ä–∏–∑–∞ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —è—Ä–∞—Ç–∏–ª–¥–∏ –≤–∞ {len(sellers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–∫–∞ —é–±–æ—Ä–∏–ª–¥–∏!",
            reply_markup=get_main_keyboard(user['role'])
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@router.message(SellerOfferStates.waiting_for_excel_offer, F.document)
async def process_excel_offer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_content = await bot.download_file(file.file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
        is_valid, error_msg = excel_handler.validate_excel_structure(file_content.read(), 'offer')
        if not is_valid:
            await message.answer(f"‚ùå {error_msg}")
            return
        
        file_content.seek(0)
        # –ü–∞—Ä—Å–∏–º Excel
        offer_data = excel_handler.parse_seller_offer(file_content.read())
        
        if not offer_data['items']:
            await message.answer("‚ùå –§–∞–π–ª –±—û—à —ë–∫–∏ –Ω–∞—Ä—Ö–ª–∞—Ä –±–∏–ª–∞–Ω —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–Ω–∏ —û–∑ –∏—á–∏–≥–∞ –æ–ª–º–∞–≥–∞–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        request_id = state_data.get('request_id')
        
        if not request_id:
            await message.answer("‚ùå –•–∞—Ç–æ–ª–∏–∫: –∞—Ä–∏–∑–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = db.get_user(message.from_user.id)
        
        offer_id = db.add_seller_offer(
            request_id=request_id,
            seller_id=user['id'],
            total_amount=offer_data['total_amount']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for item in offer_data['items']:
            db.add_offer_item(
                offer_id=offer_id,
                product_name=item['product_name'],
                quantity=item['quantity'],
                unit=item['unit'],
                price_per_unit=item['price_per_unit'],
                total_price=item['total_price'],
                material_description=item['material_description']
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        conn = db.get_connection()
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        cursor.execute("""
            SELECT pr.id, pr.buyer_id, 
                   COALESCE(pr.supplier, '–ù–µ —É–∫–∞–∑–∞–Ω') as supplier_name, 
                   COALESCE(pr.object_name, '–ù–µ —É–∫–∞–∑–∞–Ω') as object_name,
                   pr.status, pr.created_at,
                   u.telegram_id as buyer_telegram_id, u.full_name as buyer_name
            FROM purchase_requests pr
            JOIN users u ON pr.buyer_id = u.id
            WHERE pr.id = %s
        """, (request_id,))
        request = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if request:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
                offers = db.get_offers_for_request(request_id)
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                summary = excel_handler.create_offers_summary(offers, request['buyer_name'])
                
                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
                excel_file = excel_handler.create_offers_excel(offers, request['buyer_name'])
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup(inline_keyboard=[])
                for offer in offers:
                    keyboard.inline_keyboard.append([
                        InlineKeyboardButton(
                            text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å #{offer['id']}", 
                            callback_data=f"approve_offer_{offer['id']}"
                        ),
                        InlineKeyboardButton(
                            text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{offer['id']}", 
                            callback_data=f"reject_offer_{offer['id']}"
                        )
                    ])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                await bot.send_document(
                    request['buyer_telegram_id'],
                    types.BufferedInputFile(
                        excel_file.getvalue(),
                        filename=f"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è_–∑–∞—è–≤–∫–∞_{request_id}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
                    ),
                    caption="üìä –ü–æ—Å—Ç–∞–≤—â–∏–∫–ª–∞—Ä —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏ –±–∏–ª–∞–Ω Excel —Ñ–∞–π–ª"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await bot.send_message(
                    request['buyer_telegram_id'],
                    summary,
                    reply_markup=keyboard
                )
                
                await message.answer(
                    f"‚úÖ –¢–∞–∫–ª–∏—Ñ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∫–∞ —é–±–æ—Ä–∏–ª–¥–∏!",
                    reply_markup=get_main_keyboard(user['role'])
                )
                
            except Exception as e:
                logger.error(f"Failed to notify buyer {request['buyer_telegram_id']}: {e}")
                await message.answer("‚úÖ –¢–∞–∫–ª–∏—Ñ —Å–∞“õ–ª–∞–Ω–¥–∏, –ª–µ–∫–∏–Ω –∑–∞–∫–∞–∑—á–∏–∫–Ω–∏ —Ö–∞–±–∞—Ä–¥–æ—Ä “õ–∏–ª–∏—à –º—É–º–∫–∏–Ω —ç–º–∞—Å.")
        
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(Command("approve"))
async def cmd_approve(message: types.Message):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        telegram_id = int(message.text.split()[1])
        db.approve_user(telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
        user = db.get_user(telegram_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        try:
            if user and user['is_approved']:
                await bot.send_message(
                    telegram_id,
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                    f"–•—É—à –∫–µ–ª–∏–±—Å–∏–∑, {user['full_name']}!\n"
                    f"–†–æ–ª–∏–Ω–≥–∏–∑: {user['role']}\n"
                    f"–í–∞“õ—Ç: {get_current_time()}",
                    reply_markup=get_main_keyboard(user['role'])
                )
                print(f"DEBUG: –ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —Å —Ä–æ–ª—å—é {user['role']}")
            else:
                await bot.send_message(
                    telegram_id,
                    "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        
        await message.answer(f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {telegram_id} –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏!")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            temp_storage = MemoryStorage()
            temp_dp = Dispatcher(storage=temp_storage)
            temp_state = FSMContext(storage=temp_storage, key=Bot(id=0, token=""), chat=telegram_id, user=telegram_id)
            await temp_state.clear()
            print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        except Exception as e:
            print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        
    except (IndexError, ValueError):
        await message.answer("–ò—à–ª–∞—Ç–∏—à: /approve <telegram_id>")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(Command("clear"))
async def cmd_clear(message: types.Message, state: FSMContext):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM"""
    await state.clear()
    await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ!")

@router.message(Command("reset"))
async def cmd_reset(message: types.Message, state: FSMContext):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    user = db.get_user(message.from_user.id)
    
    if user and user['is_approved']:
        await message.answer(
            f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ!\n"
            f"–•—É—à –∫–µ–ª–∏–±—Å–∏–∑, {user['full_name']}!\n"
            f"–†–æ–ª–∏–Ω–≥–∏–∑: {user['role']}",
            reply_markup=get_main_keyboard(user['role'])
        )
    else:
        await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@router.message(Command("reject"))
async def cmd_reject(message: types.Message):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    try:
        telegram_id = int(message.text.split()[1])
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE telegram_id = %s", (telegram_id,))
        conn.commit()
        cursor.close()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                telegram_id,
                "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        
        await message.answer(f"–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {telegram_id} —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏ –≤–∞ —Ç–∏–∑–∏–º–¥–∞–Ω —û—á–∏—Ä–∏–ª–¥–∏!")
        
    except (IndexError, ValueError):
        await message.answer("–ò—à–ª–∞—Ç–∏—à: /reject <telegram_id>")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@router.callback_query(lambda c: c.data.startswith('approve_offer_'))
async def process_approve_offer(callback_query: types.CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º"""
    try:
        offer_id = int(callback_query.data.split('_')[2])
        user = db.get_user(callback_query.from_user.id)
        
        if not user or user['role'] != 'buyer':
            await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç –æ–¥–æ–±—Ä—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        offer = db.get_offer_with_items(offer_id)
        if not offer:
            await callback_query.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        db.update_offer_status(offer_id, 'approved')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_id = db.add_delivery(offer_id, None)  # warehouse_user_id –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöö –¢–æ–≤–∞—Ä–ª–∞—Ä–Ω–∏ —é–±–æ—Ä–∏–ª–¥–∏", callback_data=f"ship_sent_{delivery_id}")]
            ])
            
            await bot.send_message(
                offer['seller_telegram_id'],
                f"‚úÖ –°–∏–∑–Ω–∏–Ω–≥ —Ç–∞–∫–ª–∏—Ñ–∏–Ω–≥–∏–∑ #{offer_id} –∑–∞–∫–∞–∑—á–∏–∫ —Ç–æ–º–æ–Ω–∏–¥–∞–Ω —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏!\n\n"
                f"üíµ –£–º—É–º–∏–π —Å—É–º–º–∞: {offer['total_amount']:,} —Å—û–º\n"
                f"üìÖ –¢–∞—Å–¥–∏“õ–ª–∞—à —Å–∞–Ω–∞—Å–∏: {get_current_time()}\n"
                f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id} —è—Ä–∞—Ç–∏–ª–¥–∏\n\n"
                f"üöö –ò–ª—Ç–∏–º–æ—Å, —Ç–æ–≤–∞—Ä–ª–∞—Ä–Ω–∏ —Å–∫–ª–∞–¥–≥–∞ —é–±–æ—Ä–∏–Ω–≥ –≤–∞ —Ç—û“ì—Ä–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Failed to notify seller {offer['seller_telegram_id']}: {e}")
        
        await callback_query.message.edit_text(
            f"‚úÖ –¢–∞–∫–ª–∏—Ñ #{offer_id} —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏!\n"
            f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {offer['full_name']}\n"
            f"üíµ –°—É–º–º–∞: {offer['total_amount']:,} —Å—û–º\n"
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id} —è—Ä–∞—Ç–∏–ª–¥–∏"
        )
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(lambda c: c.data.startswith('reject_offer_'))
async def process_reject_offer(callback_query: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º"""
    try:
        offer_id = int(callback_query.data.split('_')[2])
        user = db.get_user(callback_query.from_user.id)
        
        if not user or user['role'] != 'buyer':
            await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        offer = db.get_offer_with_items(offer_id)
        if not offer:
            await callback_query.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        db.update_offer_status(offer_id, 'rejected')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        try:
            await bot.send_message(
                offer['seller_telegram_id'],
                f"‚ùå –°–∏–∑–Ω–∏–Ω–≥ —Ç–∞–∫–ª–∏—Ñ–∏–Ω–≥–∏–∑ #{offer_id} –∑–∞–∫–∞–∑—á–∏–∫ —Ç–æ–º–æ–Ω–∏–¥–∞–Ω —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏.\n"
                f"üìÖ –†–∞–¥ —ç—Ç–∏—à —Å–∞–Ω–∞—Å–∏: {get_current_time()}"
            )
        except Exception as e:
            logger.error(f"Failed to notify seller {offer['seller_telegram_id']}: {e}")
        
        await callback_query.message.edit_text(
            f"‚ùå –¢–∞–∫–ª–∏—Ñ #{offer_id} —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏.\n"
            f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {offer['full_name']}"
        )
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith('deliver_'))
async def process_delivery_confirmation(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        delivery_id = int(callback_query.data.split('_')[1])
        user = db.get_user(callback_query.from_user.id)
        
        if not user or user['role'] != 'warehouse':
            await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—Å–∫–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
        conn = db.get_connection()
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        cursor.execute("""
            SELECT d.*, so.total_amount, pr.supplier, pr.object_name,
                   u_seller.full_name as seller_name, u_buyer.full_name as buyer_name,
                   u_buyer.telegram_id as buyer_telegram_id
            FROM deliveries d
            JOIN seller_offers so ON d.offer_id = so.id
            JOIN purchase_requests pr ON so.purchase_request_id = pr.id
            JOIN users u_seller ON so.seller_id = u_seller.id
            JOIN users u_buyer ON pr.buyer_id = u_buyer.id
            WHERE d.id = %s
        """, (delivery_id,))
        delivery = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if not delivery:
            await callback_query.answer("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        db.update_delivery_status(delivery_id, 'delivered')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        try:
            await bot.send_message(
                delivery['buyer_telegram_id'],
                f"üéâ **–¢–æ–≤–∞—Ä–ª–∞—Ä –∫–µ–ª–¥–∏!**\n\n"
                f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n"
                f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['supplier']}\n"
                f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {delivery['object_name']}\n"
                f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['seller_name']}\n"
                f"üíµ –°—É–º–º–∞: {delivery['total_amount']:,} —Å—É–º\n"
                f"üìÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {get_current_time()}\n\n"
                f"‚úÖ –¢–æ–≤–∞—Ä–ª–∞—Ä —Å–∫–ª–∞–¥–¥–∞ —Ç–∞–π—ë—Ä. –û–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω!"
            )
        except Exception as e:
            logger.error(f"Failed to notify buyer {delivery['buyer_telegram_id']}: {e}")
        
        await callback_query.message.edit_text(
            f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"üìÖ –í—Ä–µ–º—è: {get_current_time()}\n\n"
            f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤!"
        )
        await callback_query.answer("‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(lambda c: c.data.startswith('goods_received_'))
async def process_goods_received(callback_query: types.CallbackQuery):
    """–°–∫–ª–∞–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        delivery_id = int(callback_query.data.split('_')[2])
        user = db.get_user(callback_query.from_user.id)
        
        if not user or user['role'] != 'warehouse':
            await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—Å–∫–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
        conn = db.get_connection()
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        cursor.execute("""
            SELECT d.*, so.total_amount, pr.supplier, pr.object_name,
                   u_seller.full_name as seller_name, u_buyer.full_name as buyer_name,
                   u_buyer.telegram_id as buyer_telegram_id
            FROM deliveries d
            JOIN seller_offers so ON d.offer_id = so.id
            JOIN purchase_requests pr ON so.purchase_request_id = pr.id
            JOIN users u_seller ON so.seller_id = u_seller.id
            JOIN users u_buyer ON pr.buyer_id = u_buyer.id
            WHERE d.id = %s
        """, (delivery_id,))
        delivery = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if not delivery:
            await callback_query.answer("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        db.update_delivery_status(delivery_id, 'received')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        try:
            await bot.send_message(
                delivery['buyer_telegram_id'],
                f"üéâ **–¢–æ–≤–∞—Ä–ª–∞—Ä –∫–µ–ª–¥–∏!**\n\n"
                f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n"
                f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['supplier']}\n"
                f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {delivery['object_name']}\n"
                f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['seller_name']}\n"
                f"üíµ –°—É–º–º–∞: {delivery['total_amount']:,} —Å—É–º\n"
                f"üìÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {get_current_time()}\n\n"
                f"‚úÖ –¢–æ–≤–∞—Ä–ª–∞—Ä —Å–∫–ª–∞–¥–¥–∞ —Ç–∞–π—ë—Ä. –û–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω!"
            )
        except Exception as e:
            logger.error(f"Failed to notify buyer {delivery['buyer_telegram_id']}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞
        await callback_query.message.edit_text(
            f"‚úÖ **–¢–æ–≤–∞—Ä–ª–∞—Ä “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!**\n\n"
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n"
            f"üìÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {get_current_time()}\n\n"
            f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤!"
        )
        await callback_query.answer("‚úÖ –¢–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã!")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(lambda c: c.data.startswith('contact_seller_'))
async def process_contact_seller(callback_query: types.CallbackQuery):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º"""
    try:
        phone = callback_query.data.split('_')[2]
        await callback_query.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {phone}")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(lambda c: c.data.startswith('contact_buyer_'))
async def process_contact_buyer(callback_query: types.CallbackQuery):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º"""
    try:
        phone = callback_query.data.split('_')[2]
        await callback_query.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {phone}")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(lambda c: c.data.startswith('ship_sent_'))
async def process_shipment_sent(callback_query: types.CallbackQuery):
    """–ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        delivery_id = int(callback_query.data.split('_')[2])
        user = db.get_user(callback_query.from_user.id)
        
        if not user or user['role'] != 'seller':
            await callback_query.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
        conn = db.get_connection()
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        cursor.execute("""
            SELECT d.*, so.total_amount, pr.supplier, pr.object_name,
                   u_seller.full_name as seller_name, u_buyer.full_name as buyer_name
            FROM deliveries d
            JOIN seller_offers so ON d.offer_id = so.id
            JOIN purchase_requests pr ON so.purchase_request_id = pr.id
            JOIN users u_seller ON so.seller_id = u_seller.id
            JOIN users u_buyer ON pr.buyer_id = u_buyer.id
            WHERE d.id = %s
        """, (delivery_id,))
        delivery = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if not delivery:
            await callback_query.answer("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Å–∫–ª–∞–¥—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        warehouse_users = db.get_users_by_role('warehouse')
        for warehouse_user in warehouse_users:
            try:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –¢–æ–≤–∞—Ä–ª–∞—Ä –∫–µ–ª–¥–∏", callback_data=f"goods_received_{delivery_id}")]
                ])
                
                await bot.send_message(
                    warehouse_user['telegram_id'],
                    f"üì¶ **–¢–æ–≤–∞—Ä–ª–∞—Ä —Å–∫–ª–∞–¥–≥–∞ –∫–µ–ª–¥–∏!**\n\n"
                    f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n"
                    f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['supplier']}\n"
                    f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {delivery['object_name']}\n"
                    f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['seller_name']}\n"
                    f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {delivery['buyer_name']}\n"
                    f"üíµ –°—É–º–º–∞: {delivery['total_amount']:,} —Å—É–º\n"
                    f"üìÖ –í—Ä–µ–º—è: {get_current_time()}\n\n"
                    f"‚úÖ –ò–ª—Ç–∏–º–æ—Å, —Ç–æ–≤–∞—Ä–ª–∞—Ä–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏–Ω–≥ –≤–∞ —Ç—û“ì—Ä–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:",
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"Failed to notify warehouse user {warehouse_user['telegram_id']}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        await callback_query.message.edit_text(
            f"üöö **–¢–æ–≤–∞—Ä–ª–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏!**\n\n"
            f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n"
            f"üìÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {get_current_time()}\n\n"
            f"‚úÖ –°–∫–ª–∞–¥ —Ö–æ–¥–∏–º–ª–∞—Ä–∏–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏. –£–ª–∞—Ä —Ç–æ–≤–∞—Ä–ª–∞—Ä–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏–±, —Ç–∞—Å–¥–∏“õ–ª–∞—à–∞–¥–∏."
        )
        await callback_query.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    current_state = await state.get_state()
    if current_state and current_state.startswith('RegistrationStates'):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        return
    
    user = db.get_user(message.from_user.id)
    
    if not user or not user['is_approved']:
        await message.answer("–ò–ª—Ç–∏–º–æ—Å, –∞–≤–≤–∞–ª /register —ë—Ä–¥–∞–º–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏–Ω–≥")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é
    text = message.text
    menu_commands = [
        "‚ÑπÔ∏è –Å—Ä–¥–∞–º",
        "üìã –ê—Ä–∏–∑–∞ —è—Ä–∞—Ç–∏—à", 
        "üìä –ú–µ–Ω–∏–Ω–≥ –∞—Ä–∏–∑–∞–ª–∞—Ä–∏–º",
        "üì¶ –ú–µ–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏–º",
        "üìã –§–∞–æ–ª –∞—Ä–∏–∑–∞–ª–∞—Ä",
        "üíº –ú–µ–Ω–∏–Ω–≥ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–º",
        "üì¶ –ö—É—Ç–≥–∞–Ω –µ—Ç–∫–∞–∑–∏–± –±–µ—Ä–∏—à–ª–∞—Ä"
    ]
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
    if text in menu_commands:
        if text == "‚ÑπÔ∏è –Å—Ä–¥–∞–º":
            await show_help(message, user['role'])
        elif text == "üìã –ê—Ä–∏–∑–∞ —è—Ä–∞—Ç–∏—à" and user['role'] == 'buyer':
            await start_purchase_request(message, state)
        elif text == "üìä –ú–µ–Ω–∏–Ω–≥ –∞—Ä–∏–∑–∞–ª–∞—Ä–∏–º" and user['role'] == 'buyer':
            await show_my_requests(message)
        elif text == "üì¶ –ú–µ–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏–º" and user['role'] == 'buyer':
            await show_my_orders(message)
        elif text == "üìã –§–∞–æ–ª –∞—Ä–∏–∑–∞–ª–∞—Ä" and user['role'] == 'seller':
            await show_active_requests(message)
        elif text == "üíº –ú–µ–Ω–∏–Ω–≥ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–º" and user['role'] == 'seller':
            await show_my_offers(message)
        elif text == "üì¶ –ö—É—Ç–≥–∞–Ω –µ—Ç–∫–∞–∑–∏–± –±–µ—Ä–∏—à–ª–∞—Ä" and user['role'] == 'warehouse':
            await show_pending_deliveries(message)
        elif text == "‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä" and user['role'] == 'warehouse':
            await show_received_deliveries(message)
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    


async def show_help(message: types.Message, role: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = "üìö –ë–æ—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à –±—û–π–∏—á–∞ –º–∞—ä–ª—É–º–æ—Ç:\n\n"
    
    if role == 'buyer':
        help_text += "üë§ –ó–∞–∫–∞–∑—á–∏–∫:\n"
        help_text += "‚Ä¢ –¢–æ–≤–∞—Ä —Å–æ—Ç–∏–± –æ–ª–∏—à —É—á—É–Ω –∞—Ä–∏–∑–∞–ª–∞—Ä —è—Ä–∞—Ç–∏–Ω–≥\n"
        help_text += "‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–ª–∞—Ä–¥–∞–Ω —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä –æ–ª–∏–Ω–≥\n"
        help_text += "‚Ä¢ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä —Å—Ç–∞—Ç—É—Å–∏–Ω–∏ –∫—É–∑–∞—Ç–∏–Ω–≥\n\n"
    elif role == 'seller':
        help_text += "üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫:\n"
        help_text += "‚Ä¢ –§–∞–æ–ª –∞—Ä–∏–∑–∞–ª–∞—Ä–Ω–∏ –∫—û—Ä–∏–Ω–≥\n"
        help_text += "‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫–ª–∞—Ä–≥–∞ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä —é–±–æ—Ä–∏–Ω–≥\n"
        help_text += "‚Ä¢ –é–∑–∏–Ω–≥–∏–∑–Ω–∏–Ω–≥ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ –∫—É–∑–∞—Ç–∏–Ω–≥\n\n"
    elif role == 'warehouse':
        help_text += "üè≠ –ó–∞–≤. –°–∫–ª–∞–¥:\n"
        help_text += "‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–ª–∞—Ä–¥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä–Ω–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–≥\n"
        help_text += "‚Ä¢ –¢–æ–≤–∞—Ä–ª–∞—Ä–Ω–∏ –æ–ª–∏—à–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥\n"
        help_text += "‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫–ª–∞—Ä–Ω–∏ —Ö–∞–±–∞—Ä–¥–æ—Ä “õ–∏–ª–∏–Ω–≥\n\n"
    
    help_text += "‚è∞ –í–∞“õ—Ç: " + get_current_time()
    await message.answer(help_text)

async def start_purchase_request(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä Excel —Ñ–∞–π–ª", callback_data="create_excel_request")],
        [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç", callback_data="create_text_request")]
    ])
    
    await message.answer(
        "üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏:",
        reply_markup=keyboard
    )

async def show_my_requests(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    user = db.get_user(message.from_user.id)
    if not user or user['role'] != 'buyer':
        await message.answer("‚ùå –§–∞“õ–∞—Ç –∑–∞–∫–∞–∑—á–∏–∫–ª–∞—Ä –∞—Ä–∏–∑–∞–ª–∞—Ä–Ω–∏ –∫—û—Ä–∞ –æ–ª–∞–¥–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = db.get_connection()
    cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
    cursor.execute("""
        SELECT id, buyer_id, 
               COALESCE(supplier, '–ù–µ —É–∫–∞–∑–∞–Ω') as supplier_name, 
               COALESCE(object_name, '–ù–µ —É–∫–∞–∑–∞–Ω') as object_name,
               status, created_at
        FROM purchase_requests 
        WHERE buyer_id = %s 
        ORDER BY created_at DESC
    """, (user['id'],))
    requests = cursor.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
    for request in requests:
        cursor.execute("""
            SELECT * FROM request_items 
            WHERE request_id = %s 
            ORDER BY created_at
        """, (request['id'],))
        request['items'] = cursor.fetchall()
    
    cursor.close()
    conn.close()
    
    if not requests:
        await message.answer("üì≠ “≤–æ–∑–∏—Ä—á–∞ –∞—Ä–∏–∑–∞–ª–∞—Ä–∏–Ω–≥–∏–∑ –π—û“õ.")
        return
    
    for req in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
        text = f"üìã **–ó–∞—è–≤–∫–∞ #{req['id']}**\n\n"
        text += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {req['supplier_name']}\n"
        text += f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {req['object_name']}\n"
        text += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(req['items'])}\n"
        text += f"üìÖ –î–∞—Ç–∞: {req['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {req['status']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        text += "üìã **–¢–æ–≤–∞—Ä—ã:**\n"
        if req['items']:
            for i, item in enumerate(req['items'][:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                text += f"{i}. {item['product_name']} - {item['quantity']} {item['unit']}\n"
                if item['material_description']:
                    text += f"   üìù {item['material_description']}\n"
            
            if len(req['items']) > 3:
                text += f"... –∏ –µ—â–µ {len(req['items']) - 3} —Ç–æ–≤–∞—Ä–æ–≤\n"
        else:
            text += "–¢–æ–≤–∞—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
        
        await message.answer(text)

async def show_active_requests(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    user = db.get_user(message.from_user.id)
    if not user or user['role'] != 'seller':
        await message.answer("‚ùå –§–∞“õ–∞—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–ª–∞—Ä —Ñ–∞–æ–ª –∞—Ä–∏–∑–∞–ª–∞—Ä–Ω–∏ –∫—û—Ä–∞ –æ–ª–∞–¥–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    conn = db.get_connection()
    cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
    cursor.execute("""
        SELECT pr.id, pr.buyer_id, 
               COALESCE(pr.supplier, '–ù–µ —É–∫–∞–∑–∞–Ω') as supplier_name, 
               COALESCE(pr.object_name, '–ù–µ —É–∫–∞–∑–∞–Ω') as object_name,
               pr.status, pr.created_at,
               u.full_name as buyer_name 
        FROM purchase_requests pr
        JOIN users u ON pr.buyer_id = u.id
        WHERE pr.status = 'active'
        ORDER BY pr.created_at DESC
    """)
    requests = cursor.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
    for request in requests:
        cursor.execute("""
            SELECT * FROM request_items 
            WHERE request_id = %s 
            ORDER BY created_at
        """, (request['id'],))
        request['items'] = cursor.fetchall()
    
    cursor.close()
    conn.close()
    
    if not requests:
        await message.answer("üì≠ –§–∞–æ–ª –∞—Ä–∏–∑–∞–ª–∞—Ä –π—û“õ.")
        return
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
    excel_file = excel_handler.create_active_requests_excel(requests, user['full_name'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    await message.answer_document(
        types.BufferedInputFile(
            excel_file.getvalue(),
            filename=f"–∞–∫—Ç–∏–≤–Ω—ã–µ_–∑–∞—è–≤–∫–∏_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        ),
        caption="üìã Excel —Ñ–∞–π–ª —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏"
    )
    
    for req in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
        text = f"üìã **–ó–∞—è–≤–∫–∞ #{req['id']}**\n\n"
        text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {req['buyer_name']}\n"
        text += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {req['supplier_name']}\n"
        text += f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {req['object_name']}\n"
        text += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(req['items'])}\n"
        text += f"üìÖ –î–∞—Ç–∞: {req['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        text += "üìã **–¢–æ–≤–∞—Ä—ã:**\n"
        if req['items']:
            for i, item in enumerate(req['items'][:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                text += f"{i}. {item['product_name']} - {item['quantity']} {item['unit']}\n"
                if item['material_description']:
                    text += f"   üìù {item['material_description']}\n"
            
            if len(req['items']) > 3:
                text += f"... –∏ –µ—â–µ {len(req['items']) - 3} —Ç–æ–≤–∞—Ä–æ–≤\n"
        else:
            text += "–¢–æ–≤–∞—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíº –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"send_offer_{req['id']}")]
        ])
        
        await message.answer(text, reply_markup=keyboard)

async def show_my_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    user = db.get_user(message.from_user.id)
    if not user or user['role'] != 'buyer':
        await message.answer("‚ùå –§–∞“õ–∞—Ç –∑–∞–∫–∞–∑—á–∏–∫–ª–∞—Ä –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ –∫—û—Ä–∞ –æ–ª–∞–¥–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    approved_offers = db.get_approved_offers_for_buyer(user['id'])
    
    if not approved_offers:
        await message.answer("üì≠ “≤–æ–∑–∏—Ä—á–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏–Ω–≥–∏–∑ –π—û“õ.")
        return
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
    excel_file = excel_handler.create_offers_excel(approved_offers, user['full_name'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
    await message.answer_document(
        types.BufferedInputFile(
            excel_file.getvalue(),
            filename=f"–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
        ),
        caption="üì¶ Excel —Ñ–∞–π–ª —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É
    for offer in approved_offers[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
        text = f"üì¶ **–ó–∞–∫–∞–∑ #{offer['id']}**\n\n"
        text += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {offer['supplier_name']}\n"
        text += f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {offer['object_name']}\n"
        text += f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {offer['full_name']}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {offer['phone_number']}\n"
        text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {offer['total_amount']:,} —Å—É–º\n"
        text += f"üìÖ –î–∞—Ç–∞: {offer['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
        text += "üìã **–¢–æ–≤–∞—Ä—ã:**\n"
        for i, item in enumerate(offer['items'], 1):
            text += f"{i}. {item['product_name']}\n"
            text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} {item['unit']}\n"
            text += f"   üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['price_per_unit']:,} —Å—É–º\n"
            text += f"   üíµ –°—É–º–º–∞: {item['total_price']:,} —Å—É–º\n"
            if item['material_description']:
                text += f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item['material_description']}\n"
            text += "\n"
        
        await message.answer(text)

async def show_my_offers(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    user = db.get_user(message.from_user.id)
    if not user or user['role'] != 'seller':
        await message.answer("‚ùå –§–∞“õ–∞—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–ª–∞—Ä —û–∑ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–Ω–∏ –∫—û—Ä–∞ –æ–ª–∞–¥–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = db.get_connection()
    cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
    cursor.execute("""
        SELECT so.*, pr.supplier, pr.object_name
        FROM seller_offers so
        JOIN purchase_requests pr ON so.purchase_request_id = pr.id
        WHERE so.seller_id = %s 
        ORDER BY so.created_at DESC
    """, (user['id'],))
    offers = cursor.fetchall()
    
    cursor.close()
    conn.close()
    
    if not offers:
        await message.answer("üì≠ “≤–æ–∑–∏—Ä—á–∞ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–Ω–≥–∏–∑ –π—û“õ.")
        return
    
    for offer in offers[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        status_text = {
            'pending': '‚è≥ –ö—É—Ç–º–æ“õ–¥–∞',
            'approved': '‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞–Ω–≥–∞–Ω',
            'rejected': '‚ùå –†–∞–¥ —ç—Ç–∏–ª–≥–∞–Ω'
        }.get(offer['status'], '‚ùì –ù–æ–º–∞—ä–ª—É–º')
        
        text = f"üíº **–¢–∞–∫–ª–∏—Ñ #{offer['id']}**\n\n"
        text += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {offer['supplier']}\n"
        text += f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {offer['object_name']}\n"
        text += f"üíµ –£–º—É–º–∏–π —Å—É–º–º–∞: {offer['total_amount']:,} —Å—û–º\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
        text += f"üìÖ –°–∞–Ω–∞: {offer['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        
        await message.answer(text)

async def show_pending_deliveries(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–∞"""
    user = db.get_user(message.from_user.id)
    if not user or user['role'] != 'warehouse':
        await message.answer("‚ùå –§–∞“õ–∞—Ç —Å–∫–ª–∞–¥ —Ö–æ–¥–∏–º–ª–∞—Ä–∏ –µ—Ç–∫–∞–∑–∏–± –±–µ—Ä–∏—à–ª–∞—Ä–Ω–∏ –∫—û—Ä–∞ –æ–ª–∞–¥–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    deliveries = db.get_pending_deliveries()
    
    if not deliveries:
        await message.answer("üì≠ “≤–æ–∑–∏—Ä—á–∞ –∫—É—Ç–≥–∞–Ω –µ—Ç–∫–∞–∑–∏–± –±–µ—Ä–∏—à–ª–∞—Ä –π—û“õ.")
        return
    
    await message.answer(f"üì¶ –ö—É—Ç–≥–∞–Ω –µ—Ç–∫–∞–∑–∏–± –±–µ—Ä–∏—à–ª–∞—Ä: {len(deliveries)} —Ç–∞")
    
    for delivery in deliveries[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–æ—Å—Ç–∞–≤–æ–∫
        text = f"üì¶ **–ï—Ç–∫–∞–∑–∏–± –±–µ—Ä–∏—à #{delivery['id']}**\n\n"
        text += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['supplier']}\n"
        text += f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {delivery['object_name']}\n"
        text += f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['seller_name']}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {delivery['seller_phone']}\n"
        text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {delivery['buyer_name']}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {delivery['buyer_phone']}\n"
        text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {delivery['total_amount']:,} —Å—É–º\n"
        text += f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {delivery['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–æ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=f"deliver_{delivery['id']}"),
                InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º", callback_data=f"contact_seller_{delivery['seller_phone']}")
            ],
            [
                InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º", callback_data=f"contact_buyer_{delivery['buyer_phone']}")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard)

async def show_received_deliveries(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å–∫–ª–∞–¥–∞"""
    user = db.get_user(message.from_user.id)
    if not user or user['role'] != 'warehouse':
        await message.answer("‚ùå –§–∞“õ–∞—Ç —Å–∫–ª–∞–¥ —Ö–æ–¥–∏–º–ª–∞—Ä–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä–Ω–∏ –∫—û—Ä–∞ –æ–ª–∞–¥–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    deliveries = db.get_received_deliveries()
    
    if not deliveries:
        await message.answer("üì≠ “≤–æ–∑–∏—Ä—á–∞ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä –π—û“õ.")
        return
    
    await message.answer(f"‚úÖ “ö–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä: {len(deliveries)} —Ç–∞")
    
    for delivery in deliveries[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–æ—Å—Ç–∞–≤–æ–∫
        text = f"‚úÖ **“ö–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω —Ç–æ–≤–∞—Ä–ª–∞—Ä #{delivery['id']}**\n\n"
        text += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['supplier']}\n"
        text += f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {delivery['object_name']}\n"
        text += f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {delivery['seller_name']}\n"
        text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {delivery['buyer_name']}\n"
        text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {delivery['total_amount']:,} —Å—É–º\n"
        text += f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è: {delivery['received_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
        text += "üìã **–¢–æ–≤–∞—Ä—ã:**\n"
        for i, item in enumerate(delivery['items'], 1):
            text += f"{i}. {item['product_name']}\n"
            text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} {item['unit']}\n"
            text += f"   üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['price_per_unit']:,} —Å—É–º\n"
            text += f"   üíµ –°—É–º–º–∞: {item['total_price']:,} —Å—É–º\n"
            if item['material_description']:
                text += f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item['material_description']}\n"
            text += "\n"
        
        await message.answer(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.create_tables()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 