import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import FSInputFile

from config import BOT_TOKEN, ROLES, OFFER_STATUSES
from database import Database
from keyboards import *
from states import *
from utils import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await db.get_user(message.from_user.id)
    
    if user is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–∫—É–ø–æ–∫ SFX!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
        )
        await state.set_state(RegistrationStates.waiting_for_name)
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user['is_approved']:
            await show_main_menu(message)
        else:
            await message.answer(
                "‚è≥ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ."
            )

@dp.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(name=message.text)
    await message.answer(
        "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "+998XXXXXXXXX –∏–ª–∏ 998XXXXXXXXX"
    )
    await state.set_state(RegistrationStates.waiting_for_phone)

@dp.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = validate_phone_number(message.text)
    if phone is None:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+998XXXXXXXXX –∏–ª–∏ 998XXXXXXXXX"
        )
        return
    
    await state.update_data(phone=phone)
    await message.answer(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ:",
        reply_markup=get_role_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_role)

@dp.message(RegistrationStates.waiting_for_role)
async def process_role(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role_map = {
        "üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å": "buyer",
        "üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü": "seller", 
        "üè≠ –ß–µ–ª–æ–≤–µ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ": "warehouse"
    }
    
    if message.text not in role_map:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    role = role_map[message.text]
    user_data = await state.get_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await db.create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            full_name=user_data['name'],
            phone_number=user_data['phone'],
            role=role
        )
        
        if role == "seller":
            # –ü—Ä–æ–¥–∞–≤—Ü—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
            await db.approve_user(message.from_user.id)
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É.",
                reply_markup=get_main_keyboard()
            )
        else:
            # –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∏ –ª—é–¥–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ —Ç—Ä–µ–±—É—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ."
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await notify_admins_new_user(message.from_user.id, user_data['name'], role)
            
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Registration error: {e}")

async def notify_admins_new_user(telegram_id, name, role):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–¥–∫–æ–¥
    admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    for admin_id in admin_ids:
        try:
            await bot.send_message(
                admin_id,
                f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è:\n\n"
                f"–ò–º—è: {name}\n"
                f"–†–æ–ª—å: {ROLES.get(role, role)}\n"
                f"ID: {telegram_id}",
                reply_markup=get_approval_keyboard(telegram_id)
            )
        except Exception as e:
            logging.error(f"Failed to notify admin {admin_id}: {e}")

@dp.message(lambda message: message.text == "üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def create_request(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
    user = await db.get_user(message.from_user.id)
    if user['role'] != 'buyer':
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return
    
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏:",
        reply_markup=get_request_type_keyboard()
    )
    await state.set_state(RequestStates.waiting_for_request_type)

@dp.message(RequestStates.waiting_for_request_type)
async def process_request_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏"""
    if message.text == "üìä Excel —Ñ–∞–π–ª":
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω Excel
        excel_file = create_excel_template()
        await message.answer_document(
            FSInputFile(excel_file, filename="–∑–∞—è–≤–∫–∞_—à–∞–±–ª–æ–Ω.xlsx"),
            caption="üìä –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ:"
        )
        await state.set_state(RequestStates.waiting_for_excel_file)
        
    elif message.text == "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç":
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "–ü–æ—Å—Ç–∞–≤—â–∏–∫: [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞]\n"
            "–û–±—ä–µ–∫—Ç: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞]\n"
            "–¢–æ–≤–∞—Ä: [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞]\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: [—á–∏—Å–ª–æ]\n"
            "–ï–¥–∏–Ω–∏—Ü–∞: [—à—Ç/–∫–≥/–º –∏ —Ç.–¥.]\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ: [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]"
        )
        await state.set_state(RequestStates.waiting_for_text_request)
        
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await show_main_menu(message)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

@dp.message(RequestStates.waiting_for_excel_file, F.content_type == "document")
async def process_excel_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –∑–∞—è–≤–∫–æ–π"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_content = await bot.download_file(file.file_path)
        
        # –ü–∞—Ä—Å–∏–º Excel
        requests = parse_excel_request(file_content.read())
        
        if not requests:
            await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await db.get_user(message.from_user.id)
        for request_data in requests:
            await db.create_purchase_request(
                buyer_id=user['id'],
                supplier=request_data['supplier'],
                object_name=request_data['object_name'],
                product_name=request_data['product_name'],
                quantity=request_data['quantity'],
                unit=request_data['unit'],
                material_description=request_data['material_description'],
                request_type='excel'
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º
        sellers = await db.get_sellers()
        for seller in sellers:
            try:
                await bot.send_message(
                    seller['telegram_id'],
                    f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É!\n\n{format_request_text(requests[0])}"
                )
            except Exception as e:
                logging.error(f"Failed to send request to seller {seller['telegram_id']}: {e}")
        
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(sellers)} –ø—Ä–æ–¥–∞–≤—Ü–∞–º!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@dp.message(RequestStates.waiting_for_text_request)
async def process_text_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    text = message.text.lower()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    supplier = extract_value(text, "–ø–æ—Å—Ç–∞–≤—â–∏–∫:")
    object_name = extract_value(text, "–æ–±—ä–µ–∫—Ç:")
    product_name = extract_value(text, "—Ç–æ–≤–∞—Ä:")
    quantity = extract_value(text, "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    unit = extract_value(text, "–µ–¥–∏–Ω–∏—Ü–∞:")
    description = extract_value(text, "–æ–ø–∏—Å–∞–Ω–∏–µ:")
    
    if not all([supplier, object_name, product_name, quantity]):
        await message.answer(
            "‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ: –ø–æ—Å—Ç–∞–≤—â–∏–∫, –æ–±—ä–µ–∫—Ç, —Ç–æ–≤–∞—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(message.from_user.id)
    await db.create_purchase_request(
        buyer_id=user['id'],
        supplier=supplier,
        object_name=object_name,
        product_name=product_name,
        quantity=float(quantity),
        unit=unit,
        material_description=description,
        request_type='text'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞–º
    sellers = await db.get_sellers()
    for seller in sellers:
        try:
            request_data = {
                'buyer': user['full_name'],
                'supplier': supplier,
                'object_name': object_name,
                'product_name': product_name,
                'quantity': quantity,
                'unit': unit,
                'material_description': description
            }
            message_text = f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É!\n\n{format_request_text(request_data)}"
            await bot.send_message(seller['telegram_id'], message_text)
        except Exception as e:
            logging.error(f"Failed to send request to seller {seller['telegram_id']}: {e}")
    
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(sellers)} –ø—Ä–æ–¥–∞–≤—Ü–∞–º!",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

def extract_value(text, key):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á—É"""
    try:
        start = text.find(key) + len(key)
        end = text.find('\n', start)
        if end == -1:
            end = len(text)
        return text[start:end].strip()
    except:
        return ""

@dp.message(lambda message: message.text == "üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def show_my_requests(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(message.from_user.id)
    if user['role'] != 'buyer':
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return
    
    requests = await db.get_purchase_requests_for_buyer(user['id'])
    
    if not requests:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    
    for req in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
        offers = await db.get_offers_for_request(req['id'])
        
        text = f"""
üìã **–ó–∞—è–≤–∫–∞ #{req['id']}**

üè¢ **–ü–æ—Å—Ç–∞–≤—â–∏–∫:** {req['supplier']}
üèóÔ∏è **–û–±—ä–µ–∫—Ç:** {req['object_name']}
üì¶ **–¢–æ–≤–∞—Ä:** {req['product_name']}
üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {req['quantity']} {req['unit']}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {req['material_description']}
üìÖ **–î–∞—Ç–∞:** {req['created_at'].strftime('%d.%m.%Y %H:%M')}

üí∞ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:** {len(offers)}
"""
        
        if offers:
            text += "\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n"
            for offer in offers[:3]:
                text += f"‚Ä¢ {offer['full_name']}: {offer['price']} —Å—É–º\n"
        
        await message.answer(text)

@dp.message(lambda message: message.text == "üí∞ –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def show_my_offers(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    user = await db.get_user(message.from_user.id)
    if user['role'] != 'seller':
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤—Ü—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞
    offers = await db.get_seller_offers(user['id'])
    
    if not offers:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return
    
    for offer in offers[:5]:
        text = f"""
üí∞ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer['id']}**

üíµ **–¶–µ–Ω–∞:** {offer['price']} —Å—É–º
üí∏ **–°—É–º–º–∞:** {offer['total_amount']} —Å—É–º
üìÖ **–î–∞—Ç–∞:** {offer['created_at'].strftime('%d.%m.%Y %H:%M')}
üìä **–°—Ç–∞—Ç—É—Å:** {OFFER_STATUSES.get(offer['status'], offer['status'])}
"""
        await message.answer(text)

@dp.message(lambda message: message.text == "üì¶ –î–æ—Å—Ç–∞–≤–∫–∏")
async def show_deliveries(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user = await db.get_user(message.from_user.id)
    if user['role'] not in ['buyer', 'warehouse']:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∏ –ª—é–¥–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.")
        return
    
    if user['role'] == 'warehouse':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
        deliveries = await db.get_pending_deliveries()
        
        if not deliveries:
            await message.answer("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.")
            return
        
        for delivery in deliveries:
            text = f"""
üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞ #{delivery['id']}**

üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** {delivery['seller_name']}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {delivery['seller_phone']}
üíµ **–°—É–º–º–∞:** {delivery['total_amount']} —Å—É–º
üìÖ **–î–∞—Ç–∞:** {delivery['created_at'].strftime('%d.%m.%Y %H:%M')}
"""
            await message.answer(
                text,
                reply_markup=get_delivery_keyboard(delivery['id'])
            )

@dp.callback_query(lambda c: c.data.startswith('received_'))
async def process_delivery_received(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    delivery_id = int(callback.data.split('_')[1])
    
    try:
        await db.mark_delivery_received(delivery_id)
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ **–¢–û–í–ê–† –ü–û–õ–£–ß–ï–ù –ù–ê –°–ö–õ–ê–î–ï**"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        delivery = await db.get_delivery_info(delivery_id)
        if delivery:
            await bot.send_message(
                delivery['buyer_telegram_id'],
                "üì¶ –¢–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
            )
            
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        logging.error(f"Delivery received error: {e}")

@dp.callback_query(lambda c: c.data.startswith('approve_'))
async def process_user_approval(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split('_')[1])
    
    try:
        await db.approve_user(user_id)
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ **–û–î–û–ë–†–ï–ù–û**"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É.",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏")
        logging.error(f"User approval error: {e}")

@dp.callback_query(lambda c: c.data.startswith('reject_'))
async def process_user_rejection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split('_')[1])
    
    try:
        await callback.message.edit_text(
            callback.message.text + "\n\n‚ùå **–û–¢–ö–õ–û–ù–ï–ù–û**"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            "‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")
        logging.error(f"User rejection error: {e}")

async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    
    if user['role'] == 'admin':
        await message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['full_name']}!\n"
            f"–†–æ–ª—å: {ROLES.get(user['role'], user['role'])}",
            reply_markup=get_main_keyboard()
        )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 