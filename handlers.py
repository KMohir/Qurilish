import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from database import Database
from keyboards import *
from states import *
from utils import *
from config import ROLES, OFFER_STATUSES

db = Database()

async def handle_seller_offer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    user = await db.get_user(message.from_user.id)
    if user['role'] != 'seller':
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤—Ü—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        return
    
    await message.answer(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=get_offer_type_keyboard()
    )
    await state.set_state(OfferStates.waiting_for_offer_type)

async def process_offer_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    if message.text == "üìä Excel —Ñ–∞–π–ª":
        excel_file = create_offer_excel_template()
        await message.answer_document(
            FSInputFile(excel_file, filename="–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ_—à–∞–±–ª–æ–Ω.xlsx"),
            caption="üìä –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ:"
        )
        await state.set_state(OfferStates.waiting_for_excel_offer)
        
    elif message.text == "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç":
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "–¶–µ–Ω–∞: [—Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É]\n"
            "–°—É–º–º–∞: [–æ–±—â–∞—è —Å—É–º–º–∞]"
        )
        await state.set_state(OfferStates.waiting_for_text_offer)
        
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await show_main_menu(message)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

async def process_excel_offer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(message.document.file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        # –ü–∞—Ä—Å–∏–º Excel
        offers = parse_excel_offer(file_content.read())
        
        if not offers:
            await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await db.get_user(message.from_user.id)
        for offer_data in offers:
            await db.create_seller_offer(
                purchase_request_id=1,  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                seller_id=user['id'],
                price=offer_data['price'],
                total_amount=offer_data['total_amount'],
                offer_type='excel'
            )
        
        await message.answer(
            "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def process_text_offer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    text = message.text.lower()
    
    price = extract_value(text, "—Ü–µ–Ω–∞:")
    total_amount = extract_value(text, "—Å—É–º–º–∞:")
    
    if not all([price, total_amount]):
        await message.answer(
            "‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ: —Ü–µ–Ω–∞, —Å—É–º–º–∞."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(message.from_user.id)
    await db.create_seller_offer(
        purchase_request_id=1,  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        seller_id=user['id'],
        price=float(price),
        total_amount=float(total_amount),
        offer_type='text'
    )
    
    await message.answer(
        "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

async def handle_admin_panel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = await db.get_user(message.from_user.id)
    if user['role'] != 'admin':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    if message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏":
        await show_pending_users(message)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics(message)
    elif message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(message)

async def show_pending_users(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    pending_users = await db.get_pending_users()
    
    if not pending_users:
        await message.answer("‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return
    
    for user in pending_users:
        text = f"""
üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è**

üìù **–ò–º—è:** {user['full_name']}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {user['phone_number']}
üë§ **–†–æ–ª—å:** {ROLES.get(user['role'], user['role'])}
üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user['created_at'].strftime('%d.%m.%Y %H:%M')}
"""
        await message.answer(
            text,
            reply_markup=get_approval_keyboard(user['telegram_id'])
        )

async def show_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    stats_text = """
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –ü—Ä–æ–¥–∞–≤—Ü—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –õ—é–¥–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]

üìã **–ó–∞—è–≤–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]

üí∞ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]

üì¶ **–î–æ—Å—Ç–∞–≤–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
"""
    await message.answer(stats_text)

async def handle_offer_approval(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    offer_id = int(callback.data.split('_')[2])
    
    try:
        await db.approve_offer(offer_id)
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ **–û–î–û–ë–†–ï–ù–û**"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        offer = await db.get_offer_info(offer_id)
        if offer:
            await callback.bot.send_message(
                offer['seller_telegram_id'],
                "‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º!"
            )
            
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏")
        logging.error(f"Offer approval error: {e}")

async def handle_offer_rejection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    offer_id = int(callback.data.split('_')[2])
    
    try:
        await db.reject_offer(offer_id)
        await callback.message.edit_text(
            callback.message.text + "\n\n‚ùå **–û–¢–ö–õ–û–ù–ï–ù–û**"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        offer = await db.get_offer_info(offer_id)
        if offer:
            await callback.bot.send_message(
                offer['seller_telegram_id'],
                "‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º."
            )
            
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")
        logging.error(f"Offer rejection error: {e}")

async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    
    if user['role'] == 'admin':
        await message.answer(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['full_name']}!\n"
            f"–†–æ–ª—å: {ROLES.get(user['role'], user['role'])}",
            reply_markup=get_main_keyboard()
        ) 