import pandas as pd
import io
from datetime import datetime
import pytz
from config import TIMEZONE

class ExcelHandler:
    def __init__(self):
        self.timezone = pytz.timezone(TIMEZONE)
    
    def create_purchase_request_template(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
        data = {
            '–û–±–µ–∫—Ç –Ω–æ–º–∏': ['–ú–∏—Å–æ–ª: –ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å "–°–∞–º –°–∏—Ç–∏"'],
            '–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏': ['–ú–∏—Å–æ–ª: –¶–µ–º–µ–Ω—Ç'],
            '–ú–∏“õ–¥–æ—Ä–∏': ['100'],
            '–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏': ['–º–µ—à–æ–∫'],
            '–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö': ['–ú–∞—Ä–∫–∞ –ú400']
        }
        
        df = pd.DataFrame(data)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–ó–∞—è–≤–∫–∞')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–ó–∞—è–≤–∫–∞']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for col in range(1, len(df.columns) + 1):
                cell = worksheet.cell(row=1, column=col)
                cell.font = cell.font.copy(bold=True)
                cell.fill = cell.fill.copy(fill_type='solid', fgColor='CCCCCC')
        
        output.seek(0)
        return output
    
    def create_seller_offer_template(self, request_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞—è–≤–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ –∑–∞—è–≤–∫–∏
        items = request_data.get('items', [])
        
        if not items:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω
            data = {
                '–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏': [''],
                '–ú–∏“õ–¥–æ—Ä–∏': [''],
                '–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏': [''],
                '–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö': [''],
                '–Ω–∞—Ä—Ö–∏': [''],
                '–°—É–º–º–∞—Å–∏': ['']
            }
        else:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞—è–≤–∫–∏
            data = {
                '–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏': [item['product_name'] for item in items],
                '–ú–∏“õ–¥–æ—Ä–∏': [int(item['quantity']) for item in items],  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                '–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏': [item['unit'] for item in items],
                '–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö': [item['material_description'] for item in items],
                '–Ω–∞—Ä—Ö–∏': [''] * len(items),
                '–°—É–º–º–∞—Å–∏': [''] * len(items)
            }
        
        df = pd.DataFrame(data)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for col in range(1, len(df.columns) + 1):
                cell = worksheet.cell(row=1, column=col)
                cell.font = cell.font.copy(bold=True)
                cell.fill = cell.fill.copy(fill_type='solid', fgColor='CCCCCC')
            
            # –í—ã–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–Ω (–∂–µ–ª—Ç—ã–µ) –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã
            for row in range(2, len(items) + 2):
                # –ö–æ–ª–æ–Ω–∫–∞ –Ω–∞—Ä—Ö–∏ (–∂–µ–ª—Ç–∞—è)
                price_cell = worksheet.cell(row=row, column=5)
                price_cell.fill = price_cell.fill.copy(fill_type='solid', fgColor='FFFF00')
                
                # –ö–æ–ª–æ–Ω–∫–∞ –°—É–º–º–∞—Å–∏ (–∂–µ–ª—Ç–∞—è) —Å —Ñ–æ—Ä–º—É–ª–æ–π
                total_cell = worksheet.cell(row=row, column=6)
                total_cell.fill = total_cell.fill.copy(fill_type='solid', fgColor='FFFF00')
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É =B{row}*E{row}
                total_cell.value = f"=B{row}*E{row}"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ –ú–∏“õ–¥–æ—Ä–∏ –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            for row in range(2, len(items) + 2):
                quantity_cell = worksheet.cell(row=row, column=2)  # –°—Ç–æ–ª–±–µ—Ü B (–ú–∏“õ–¥–æ—Ä–∏)
                quantity_cell.number_format = '0'  # –§–æ—Ä–º–∞—Ç —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        
        output.seek(0)
        return output
    
    def parse_purchase_request(self, file_content):
        """–ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å –∑–∞—è–≤–∫–æ–π –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(io.BytesIO(file_content), sheet_name=0)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
            first_row = df.iloc[0]
            object_name = str(first_row['–û–±–µ–∫—Ç –Ω–æ–º–∏']).strip() if pd.notna(first_row['–û–±–µ–∫—Ç –Ω–æ–º–∏']) and str(first_row['–û–±–µ–∫—Ç –Ω–æ–º–∏']).strip() != '' else '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ú–∏—Å–æ–ª: " –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if object_name.startswith('–ú–∏—Å–æ–ª: '):
                object_name = object_name[7:]
            
            items = []
            for index, row in df.iterrows():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if pd.isna(row['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏']) or row['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏'] == '':
                    continue
                
                item = {
                    'product_name': str(row['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏']) if pd.notna(row['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏']) else '–ù–µ —É–∫–∞–∑–∞–Ω',
                    'quantity': float(row['–ú–∏“õ–¥–æ—Ä–∏']) if pd.notna(row['–ú–∏“õ–¥–æ—Ä–∏']) else 0,
                    'unit': str(row['–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏']) if pd.notna(row['–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏']) else '—à—Ç',
                    'material_description': str(row['–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö']) if pd.notna(row['–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö']) else ''
                }
                items.append(item)
            
            return {
                'object_name': object_name,
                'items': items
            }
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Excel —Ñ–∞–π–ª–∞: {str(e)}")
    
    def parse_seller_offer(self, file_content):
        """–ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(io.BytesIO(file_content), sheet_name=0)
            
            items = []
            total_amount = 0
            
            for index, row in df.iterrows():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if pd.isna(row['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏']) or row['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏'] == '':
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ü–µ–Ω—ã
                if pd.isna(row['–Ω–∞—Ä—Ö–∏']) or pd.isna(row['–°—É–º–º–∞—Å–∏']):
                    continue
                
                price_per_unit = float(row['–Ω–∞—Ä—Ö–∏'])
                item_total = float(row['–°—É–º–º–∞—Å–∏'])
                total_amount += item_total
                
                item = {
                    'product_name': str(row['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏']) if pd.notna(row['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏']) else '–ù–µ —É–∫–∞–∑–∞–Ω',
                    'quantity': float(row['–ú–∏“õ–¥–æ—Ä–∏']) if pd.notna(row['–ú–∏“õ–¥–æ—Ä–∏']) else 0,
                    'unit': str(row['–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏']) if pd.notna(row['–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏']) else '—à—Ç',
                    'material_description': str(row['–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö']) if pd.notna(row['–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö']) else '',
                    'price_per_unit': price_per_unit,
                    'total_price': item_total
                }
                items.append(item)
            
            return {
                'items': items,
                'total_amount': total_amount
            }
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
    
    def create_offers_summary(self, offers, buyer_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞"""
        if not offers:
            return "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ."
        
        summary = f"üìä –°–≤–æ–¥–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è {buyer_name}\n"
        summary += f"‚è∞ –í—Ä–µ–º—è: {datetime.now(self.timezone).strftime('%d.%m.%Y %H:%M')}\n"
        summary += "=" * 50 + "\n\n"
        
        for i, offer in enumerate(offers, 1):
            excel_info = f"\nüìÑ Excel —Ñ–∞–π–ª: {offer['excel_filename']}" if offer.get('excel_filename') else ""
            summary += f"üíº **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer['id']}**\n"
            summary += f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {offer['full_name']}\n"
            summary += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {offer['phone_number']}\n"
            summary += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {offer['total_amount']:,} —Å—É–º\n"
            summary += f"üìÖ –î–∞—Ç–∞: {offer['created_at'].strftime('%d.%m.%Y %H:%M')}{excel_info}\n"
            summary += "‚îÄ" * 30 + "\n"
            
            # –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
            for j, item in enumerate(offer['items'], 1):
                summary += f"  {j}. {item['product_name']}\n"
                summary += f"     üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} {item['unit']}\n"
                summary += f"     üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['price_per_unit']:,} —Å—É–º\n"
                summary += f"     üíµ –°—É–º–º–∞: {item['total_price']:,} —Å—É–º\n"
                if item['material_description']:
                    summary += f"     üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item['material_description']}\n"
                summary += "\n"
            
            summary += "‚îÄ" * 30 + "\n\n"
        
        return summary
    
    def create_offers_excel(self, offers, buyer_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞"""
        from openpyxl import Workbook
        from openpyxl.styles import Font, PatternFill, Alignment
        
        wb = Workbook()
        ws = wb.active
        ws.title = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID', '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–¢–µ–ª–µ—Ñ–æ–Ω', '–¢–æ–≤–∞—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ï–¥–∏–Ω–∏—Ü–∞', 
                  '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É', '–°—É–º–º–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–û–±—â–∞—è —Å—É–º–º–∞', '–î–∞—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è']
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
            cell.alignment = Alignment(horizontal="center")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        row = 2
        for offer in offers:
            for item in offer['items']:
                ws.cell(row=row, column=1, value=offer['id'])
                ws.cell(row=row, column=2, value=offer['full_name'])
                ws.cell(row=row, column=3, value=offer['phone_number'])
                ws.cell(row=row, column=4, value=item['product_name'])
                ws.cell(row=row, column=5, value=item['quantity'])
                ws.cell(row=row, column=6, value=item['unit'])
                ws.cell(row=row, column=7, value=item['price_per_unit'])
                ws.cell(row=row, column=8, value=item['total_price'])
                ws.cell(row=row, column=9, value=item['material_description'])
                ws.cell(row=row, column=10, value=offer['total_amount'])
                ws.cell(row=row, column=11, value=offer['created_at'].strftime('%d.%m.%Y %H:%M'))
                row += 1
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, len(headers) + 1):
            ws.column_dimensions[chr(64 + col)].width = 15
        
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        return output
    
    def create_active_requests_excel(self, requests, seller_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
        from openpyxl import Workbook
        from openpyxl.styles import Font, PatternFill, Alignment
        
        wb = Workbook()
        ws = wb.active
        ws.title = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['–ó–∞—è–≤–∫–∞ ID', '–ó–∞–∫–∞–∑—á–∏–∫', '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–û–±—ä–µ–∫—Ç', '–¢–æ–≤–∞—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 
                  '–ï–¥–∏–Ω–∏—Ü–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏']
        
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
            cell.alignment = Alignment(horizontal="center")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        row = 2
        for request in requests:
            for item in request['items']:
                ws.cell(row=row, column=1, value=request['id'])
                ws.cell(row=row, column=2, value=request['buyer_name'])
                ws.cell(row=row, column=3, value=request['supplier_name'])
                ws.cell(row=row, column=4, value=request['object_name'])
                ws.cell(row=row, column=5, value=item['product_name'])
                ws.cell(row=row, column=6, value=item['quantity'])
                ws.cell(row=row, column=7, value=item['unit'])
                ws.cell(row=row, column=8, value=item['material_description'])
                ws.cell(row=row, column=9, value=request['created_at'].strftime('%d.%m.%Y %H:%M'))
                row += 1
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for col in range(1, len(headers) + 1):
            ws.column_dimensions[chr(64 + col)].width = 15
        
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        return output
    
    def validate_excel_structure(self, file_content, file_type='request'):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–∞"""
        try:
            df = pd.read_excel(io.BytesIO(file_content), sheet_name=0)
            
            if file_type == 'request':
                required_columns = ['–û–±–µ–∫—Ç –Ω–æ–º–∏', '–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏', '–ú–∏“õ–¥–æ—Ä–∏', '–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏', '–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö']
            else:  # offer
                required_columns = ['–ú–∞—Ö—Å—É–ª–æ—Ç –Ω–æ–º–∏', '–ú–∏“õ–¥–æ—Ä–∏', '–é–ª—á–æ–≤ –±–∏—Ä–ª–∏–≥–∏', '–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–æ—Ö', '–Ω–∞—Ä—Ö–∏', '–°—É–º–º–∞—Å–∏']
            
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}"
            
            return True, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {str(e)}" 